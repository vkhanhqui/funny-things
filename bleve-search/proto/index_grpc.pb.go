// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: proto/index.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	IndexService_CreateIndex_FullMethodName                = "/index.IndexService/CreateIndex"
	IndexService_DeleteIndex_FullMethodName                = "/index.IndexService/DeleteIndex"
	IndexService_IndexDocument_FullMethodName              = "/index.IndexService/IndexDocument"
	IndexService_Search_FullMethodName                     = "/index.IndexService/Search"
	IndexService_GetDocumentCount_FullMethodName           = "/index.IndexService/GetDocumentCount"
	IndexService_BulkLoadDocuments_FullMethodName          = "/index.IndexService/BulkLoadDocuments"
	IndexService_CheckIndexContents_FullMethodName         = "/index.IndexService/CheckIndexContents"
	IndexService_PrintTermDictionary_FullMethodName        = "/index.IndexService/PrintTermDictionary"
	IndexService_DumpIndexContentsWithLimit_FullMethodName = "/index.IndexService/DumpIndexContentsWithLimit"
	IndexService_ListIndexFields_FullMethodName            = "/index.IndexService/ListIndexFields"
	IndexService_GetPartitions_FullMethodName              = "/index.IndexService/GetPartitions"
)

// IndexServiceClient is the client API for IndexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexServiceClient interface {
	CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*CreateIndexResponse, error)
	DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...grpc.CallOption) (*DeleteIndexResponse, error)
	IndexDocument(ctx context.Context, in *IndexDocumentRequest, opts ...grpc.CallOption) (*IndexDocumentResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResult, error)
	GetDocumentCount(ctx context.Context, in *GetDocumentCountRequest, opts ...grpc.CallOption) (*GetDocumentCountResponse, error)
	BulkLoadDocuments(ctx context.Context, in *BulkLoadDocumentsRequest, opts ...grpc.CallOption) (*BulkLoadDocumentsResponse, error)
	CheckIndexContents(ctx context.Context, in *CheckIndexContentsRequest, opts ...grpc.CallOption) (*CheckIndexContentsResponse, error)
	PrintTermDictionary(ctx context.Context, in *PrintTermDictionaryRequest, opts ...grpc.CallOption) (*PrintTermDictionaryResponse, error)
	DumpIndexContentsWithLimit(ctx context.Context, in *DumpIndexContentsWithLimitRequest, opts ...grpc.CallOption) (*DumpIndexContentsWithLimitResponse, error)
	ListIndexFields(ctx context.Context, in *ListIndexFieldsRequest, opts ...grpc.CallOption) (*ListIndexFieldsResponse, error)
	GetPartitions(ctx context.Context, in *GetPartitionsRequest, opts ...grpc.CallOption) (*GetPartitionsResponse, error)
}

type indexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexServiceClient(cc grpc.ClientConnInterface) IndexServiceClient {
	return &indexServiceClient{cc}
}

func (c *indexServiceClient) CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*CreateIndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIndexResponse)
	err := c.cc.Invoke(ctx, IndexService_CreateIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...grpc.CallOption) (*DeleteIndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteIndexResponse)
	err := c.cc.Invoke(ctx, IndexService_DeleteIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) IndexDocument(ctx context.Context, in *IndexDocumentRequest, opts ...grpc.CallOption) (*IndexDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IndexDocumentResponse)
	err := c.cc.Invoke(ctx, IndexService_IndexDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResult)
	err := c.cc.Invoke(ctx, IndexService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) GetDocumentCount(ctx context.Context, in *GetDocumentCountRequest, opts ...grpc.CallOption) (*GetDocumentCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentCountResponse)
	err := c.cc.Invoke(ctx, IndexService_GetDocumentCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) BulkLoadDocuments(ctx context.Context, in *BulkLoadDocumentsRequest, opts ...grpc.CallOption) (*BulkLoadDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkLoadDocumentsResponse)
	err := c.cc.Invoke(ctx, IndexService_BulkLoadDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) CheckIndexContents(ctx context.Context, in *CheckIndexContentsRequest, opts ...grpc.CallOption) (*CheckIndexContentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckIndexContentsResponse)
	err := c.cc.Invoke(ctx, IndexService_CheckIndexContents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) PrintTermDictionary(ctx context.Context, in *PrintTermDictionaryRequest, opts ...grpc.CallOption) (*PrintTermDictionaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrintTermDictionaryResponse)
	err := c.cc.Invoke(ctx, IndexService_PrintTermDictionary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) DumpIndexContentsWithLimit(ctx context.Context, in *DumpIndexContentsWithLimitRequest, opts ...grpc.CallOption) (*DumpIndexContentsWithLimitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DumpIndexContentsWithLimitResponse)
	err := c.cc.Invoke(ctx, IndexService_DumpIndexContentsWithLimit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) ListIndexFields(ctx context.Context, in *ListIndexFieldsRequest, opts ...grpc.CallOption) (*ListIndexFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIndexFieldsResponse)
	err := c.cc.Invoke(ctx, IndexService_ListIndexFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) GetPartitions(ctx context.Context, in *GetPartitionsRequest, opts ...grpc.CallOption) (*GetPartitionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPartitionsResponse)
	err := c.cc.Invoke(ctx, IndexService_GetPartitions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexServiceServer is the server API for IndexService service.
// All implementations must embed UnimplementedIndexServiceServer
// for forward compatibility
type IndexServiceServer interface {
	CreateIndex(context.Context, *CreateIndexRequest) (*CreateIndexResponse, error)
	DeleteIndex(context.Context, *DeleteIndexRequest) (*DeleteIndexResponse, error)
	IndexDocument(context.Context, *IndexDocumentRequest) (*IndexDocumentResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResult, error)
	GetDocumentCount(context.Context, *GetDocumentCountRequest) (*GetDocumentCountResponse, error)
	BulkLoadDocuments(context.Context, *BulkLoadDocumentsRequest) (*BulkLoadDocumentsResponse, error)
	CheckIndexContents(context.Context, *CheckIndexContentsRequest) (*CheckIndexContentsResponse, error)
	PrintTermDictionary(context.Context, *PrintTermDictionaryRequest) (*PrintTermDictionaryResponse, error)
	DumpIndexContentsWithLimit(context.Context, *DumpIndexContentsWithLimitRequest) (*DumpIndexContentsWithLimitResponse, error)
	ListIndexFields(context.Context, *ListIndexFieldsRequest) (*ListIndexFieldsResponse, error)
	GetPartitions(context.Context, *GetPartitionsRequest) (*GetPartitionsResponse, error)
	mustEmbedUnimplementedIndexServiceServer()
}

// UnimplementedIndexServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIndexServiceServer struct {
}

func (UnimplementedIndexServiceServer) CreateIndex(context.Context, *CreateIndexRequest) (*CreateIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (UnimplementedIndexServiceServer) DeleteIndex(context.Context, *DeleteIndexRequest) (*DeleteIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIndex not implemented")
}
func (UnimplementedIndexServiceServer) IndexDocument(context.Context, *IndexDocumentRequest) (*IndexDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexDocument not implemented")
}
func (UnimplementedIndexServiceServer) Search(context.Context, *SearchRequest) (*SearchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedIndexServiceServer) GetDocumentCount(context.Context, *GetDocumentCountRequest) (*GetDocumentCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentCount not implemented")
}
func (UnimplementedIndexServiceServer) BulkLoadDocuments(context.Context, *BulkLoadDocumentsRequest) (*BulkLoadDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkLoadDocuments not implemented")
}
func (UnimplementedIndexServiceServer) CheckIndexContents(context.Context, *CheckIndexContentsRequest) (*CheckIndexContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIndexContents not implemented")
}
func (UnimplementedIndexServiceServer) PrintTermDictionary(context.Context, *PrintTermDictionaryRequest) (*PrintTermDictionaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintTermDictionary not implemented")
}
func (UnimplementedIndexServiceServer) DumpIndexContentsWithLimit(context.Context, *DumpIndexContentsWithLimitRequest) (*DumpIndexContentsWithLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpIndexContentsWithLimit not implemented")
}
func (UnimplementedIndexServiceServer) ListIndexFields(context.Context, *ListIndexFieldsRequest) (*ListIndexFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIndexFields not implemented")
}
func (UnimplementedIndexServiceServer) GetPartitions(context.Context, *GetPartitionsRequest) (*GetPartitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartitions not implemented")
}
func (UnimplementedIndexServiceServer) mustEmbedUnimplementedIndexServiceServer() {}

// UnsafeIndexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexServiceServer will
// result in compilation errors.
type UnsafeIndexServiceServer interface {
	mustEmbedUnimplementedIndexServiceServer()
}

func RegisterIndexServiceServer(s grpc.ServiceRegistrar, srv IndexServiceServer) {
	s.RegisterService(&IndexService_ServiceDesc, srv)
}

func _IndexService_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_CreateIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).CreateIndex(ctx, req.(*CreateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_DeleteIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).DeleteIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_DeleteIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).DeleteIndex(ctx, req.(*DeleteIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_IndexDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).IndexDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_IndexDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).IndexDocument(ctx, req.(*IndexDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_GetDocumentCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).GetDocumentCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_GetDocumentCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).GetDocumentCount(ctx, req.(*GetDocumentCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_BulkLoadDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkLoadDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).BulkLoadDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_BulkLoadDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).BulkLoadDocuments(ctx, req.(*BulkLoadDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_CheckIndexContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIndexContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).CheckIndexContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_CheckIndexContents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).CheckIndexContents(ctx, req.(*CheckIndexContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_PrintTermDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrintTermDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).PrintTermDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_PrintTermDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).PrintTermDictionary(ctx, req.(*PrintTermDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_DumpIndexContentsWithLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpIndexContentsWithLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).DumpIndexContentsWithLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_DumpIndexContentsWithLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).DumpIndexContentsWithLimit(ctx, req.(*DumpIndexContentsWithLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_ListIndexFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIndexFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).ListIndexFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_ListIndexFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).ListIndexFields(ctx, req.(*ListIndexFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_GetPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).GetPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_GetPartitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).GetPartitions(ctx, req.(*GetPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndexService_ServiceDesc is the grpc.ServiceDesc for IndexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "index.IndexService",
	HandlerType: (*IndexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIndex",
			Handler:    _IndexService_CreateIndex_Handler,
		},
		{
			MethodName: "DeleteIndex",
			Handler:    _IndexService_DeleteIndex_Handler,
		},
		{
			MethodName: "IndexDocument",
			Handler:    _IndexService_IndexDocument_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _IndexService_Search_Handler,
		},
		{
			MethodName: "GetDocumentCount",
			Handler:    _IndexService_GetDocumentCount_Handler,
		},
		{
			MethodName: "BulkLoadDocuments",
			Handler:    _IndexService_BulkLoadDocuments_Handler,
		},
		{
			MethodName: "CheckIndexContents",
			Handler:    _IndexService_CheckIndexContents_Handler,
		},
		{
			MethodName: "PrintTermDictionary",
			Handler:    _IndexService_PrintTermDictionary_Handler,
		},
		{
			MethodName: "DumpIndexContentsWithLimit",
			Handler:    _IndexService_DumpIndexContentsWithLimit_Handler,
		},
		{
			MethodName: "ListIndexFields",
			Handler:    _IndexService_ListIndexFields_Handler,
		},
		{
			MethodName: "GetPartitions",
			Handler:    _IndexService_GetPartitions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/index.proto",
}
